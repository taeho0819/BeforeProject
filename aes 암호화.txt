   #include <stdio.h> 
    #include <netinet/in.h> 
    #include <sys/socket.h> 
    #include <string.h> 
 
        #define PORT 9000 
        #define IPADDR "127.0.0.1" 
        
        char buffer[BUFSIZ];


void statePrint(unsigned char state[0x04][0x04]);

void SubBytes(unsigned char state[0x04][0x04], unsigned char S_BOX[0x10][0x10]);
void ShiftRows(unsigned char state[0x04][0x04]);
void MixColumns(unsigned char state[0x04][0x04]); 
void AddRoundKey(unsigned char state[0x04][0x04], unsigned char RoundKey[0x04][0x04]);
 

 
        main( ) 
        { 
            int    c_socket; 
            struct sockaddr_in c_addr; 
            int    len; 
            int    n; 
             
            char    rcvBuffer[BUFSIZ]; 
             
            c_socket = socket(PF_INET, SOCK_STREAM, 0); 
             
            memset(&c_addr, 0, sizeof(c_addr)); 
            c_addr.sin_addr.s_addr = inet_addr(IPADDR); 
            c_addr.sin_family = AF_INET; 
            c_addr.sin_port = htons(PORT); 
        if(connect(c_socket, (struct sockaddr *) &c_addr, sizeof(c_addr))==-1) { 
                printf("Can not connect\n"); 
                close(c_socket); 
                return -1; 
            }
            scanf("%s",buffer);


unsigned char state[0x04][0x04]={               // Plain Text

        {0x00, 0x00, 0x00, 0x00},

        {0x00, 0x00, 0x00, 0x00},

        {0x00, 0x00, 0x00, 0x00},

        {0x00, 0x00, 0x00, 0x00}

    };
        for(n = 0 ; n < strlen(buffer) ; n++) {

        if(n<4) {
            state[0][n] = buffer[n];
            }
        else if(n>=4 & n<8) {
            state[1][n-4] = buffer[n];
            }
        else if(n>=8 & n<12) {
            state[2][n-8] = buffer[n];
            }
        else if(n>=12 & n<16) {
            state[3][n-12] = buffer[n];
            }
        }        

    unsigned char S_BOX[0x10][0x10]={               // S-BOX

//       0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f

        {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},   // 0

        {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},   // 1

        {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},   // 2

        {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},   // 3

        {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},   // 4

        {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},   // 5

        {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},   // 6

        {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},   // 7

        {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},   // 8

        {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},   // 9

        {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},   // a

        {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},   // b

        {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},   // c

        {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},   // d

        {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},   // e

        {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}    // f

    };

unsigned char RoundKey[0x0a][0x04][0x04]={

        {// Round 1

            {0xa0, 0x88, 0x23, 0x2a},

            {0xfa, 0x54, 0xa3, 0x6c},

            {0xfe, 0x2c, 0x39, 0x76},

            {0x17, 0xb1, 0x39, 0x05}

        },

        {// Round 2

            {0xf2, 0x7a, 0x59, 0x73},

            {0xc2, 0x96, 0x35, 0x59},

            {0x95, 0xb9, 0x80, 0xf6},

            {0xf2, 0x43, 0x7a, 0x7f}

        },

        {// Round 3

            {0x3d, 0x47, 0x1e, 0x6d},

            {0x80, 0x16, 0x23, 0x7a},

            {0x47, 0xfe, 0x7e, 0x88},

            {0x7d, 0x3e, 0x44, 0x3b}

        },

        {// Round 4

            {0xef, 0xa8, 0xb6, 0xdb},

            {0x44, 0x52, 0x71, 0x0b},

            {0xa5, 0x5b, 0x25, 0xad},

            {0x41, 0x7f, 0x3b, 0x00}

        },

        {// Round 5

            {0xd4, 0x7c, 0xca, 0x11},

            {0xd1, 0x83, 0xf2, 0xf9},

            {0xc6, 0x9d, 0xb8, 0x15},

            {0xf8, 0x87, 0xbc, 0xbc}

        },

        {// Round 6

            {0x6d, 0x11, 0xdb, 0xca},

            {0x88, 0x0b, 0xf9, 0x00},

            {0xa3, 0x3e, 0x86, 0x93},

            {0x7a, 0xfd, 0x41, 0xfd}

        },

        {// Round 7

            {0x4e, 0x5f, 0x84, 0x4e},

            {0x54, 0x5f, 0xa6, 0xa6},

            {0xf7, 0xc9, 0x4f, 0xdc},

            {0x0e, 0xf3, 0xb2, 0x4f}

        },

        {// Round 8

            {0xea, 0xb5, 0x31, 0x7f},

            {0xd2, 0x8d, 0x2b, 0x8d},

            {0x73, 0xba, 0xf5, 0x29},

            {0x21, 0xd2, 0x60, 0x2f}

        },

        {// Round 9

            {0xac, 0x19, 0x28, 0x57},

            {0x77, 0xfa, 0xd1, 0x5c},

            {0x66, 0xdc, 0x29, 0x00},

            {0xf3, 0x21, 0x41, 0x6e}

        },

        {// Round 10

            {0xd0, 0xc9, 0xe1, 0xb6},

            {0x14, 0xee, 0x3f, 0x63},

            {0xf9, 0x25, 0x0c, 0x0c},

            {0xa8, 0x89, 0xc8, 0xa6}

        }

    };

 

 unsigned char CipherKey[0x04][0x04]={           // Cipher Key

        {0x2b, 0x28, 0xab, 0x09},

        {0x7e, 0xae, 0xf7, 0xcf},

        {0x15, 0xd2, 0x15, 0x4f},

        {0x16, 0xa6, 0x88, 0x3c}

    };



               printf("PlanText\n");

                statePrint(state);

                   AddRoundKey(state, CipherKey);

 

    for(n=0; n<9; n++){

        printf("Round %d\n", n+1);

        SubBytes(state, S_BOX);

        ShiftRows(state);

        MixColumns(state);

        AddRoundKey(state, RoundKey[n]);

    }

 

    printf("Round 10\n");

    SubBytes(state, S_BOX);

    ShiftRows(state);

    AddRoundKey(state, RoundKey[0x09]);

 



             buffer[strlen(buffer)]='\0';
            write(c_socket, buffer, strlen(buffer)+1); 
             
            if((n = read(c_socket, rcvBuffer, sizeof(rcvBuffer))) < 0) { 
                return (-1); 
            } 
             
            rcvBuffer[n] = '\0'; 
            printf("received Data : %s\n", rcvBuffer); 
             
            close(c_socket); 
        } 

void statePrint(unsigned char state[0x04][0x04]){

    int i, j;

 

    for(i=0; i<4; i++){

        for(j=0; j<4; j++){

            printf("%#04x ", state[i][j]);

        }

        printf("\n");

    }

    printf("\n");

}

 

void SubBytes(unsigned char state[0x04][0x04], unsigned char S_BOX[0x10][0x10]){

    int i, j, x, y;

 

    printf("SubBytes\n");

    for(i=0; i<4; i++){

        for(j=0; j<4; j++){

            x = state[i][j] >> 4;

            y = state[i][j] & 0x0f;

            state[i][j] = S_BOX[x][y];

        }

    }

    statePrint(state);

}
void ShiftRows(unsigned char state[0x04][0x04]){

    int i, j, k, tmp;

 

    printf("ShiftRows\n");

    for(i=0; i<4; i++){

        for(j=4-i; j<4; j++){

            tmp = state[i][0];

            for(k=0; k<4-1; k++){

                state[i][k] = state[i][k+1];

            }

            state[i][3] = tmp;

        }

    }

    statePrint(state);

}
void MixColumns(unsigned char state[0x04][0x04]){

    unsigned char a[0x04], b[0x04], h;

    int i, j;

 

    printf("MixColumns\n");

    for(i=0; i<4; i++){

        for(j=0; j<4; j++){

            a[j] = state[j][i];

            h = (unsigned char)((signed char)state[j][i] >> 7);

            b[j] = state[j][i] << 1;

            b[j] ^= 0x1b & h;

        }

        state[0][i] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];

        state[1][i] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];

        state[2][i] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];

        state[3][i] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];

    }

    statePrint(state);

}
void AddRoundKey(unsigned char state[0x04][0x04], unsigned char RoundKey[0x04][0x04]){

    unsigned char Roundkey[0x04][0x04]={

        {0xa0, 0x88, 0x23, 0x2a},

        {0xfa, 0x54, 0xa3, 0x6c},

        {0xfe, 0x2c, 0x39, 0x76},

        {0x17, 0xb1, 0x39, 0x05}

    };

    int i, j;

 

    printf("AddRoundKey\n");

    for(i=0; i<4; i++){

        for(j=0; j<4; j++){

            state[i][j] ^= Roundkey[i][j];

        }

    }

    statePrint(state);

}
 